# Р¤Р°Р№Р» СЃ СЂРµР°Р»РёР·Р°С†РёРµР№ РІСЃРµР№ СЃРѕРґРµСЂР¶Р°С‚РµР»СЊРЅР№ С‡Р°СЃС‚Рё Р·Р°РґР°С‡Рё

.include "mfunc.inc"
.include "convenience.inc"


# Р”Р°Р»РµРµ РЅРѕС‚Р°С†РёСЏ (arg1, arg2, ...) -> res1, res2 РѕР·РЅР°С‡Р°РµС‚, С‡С‚Рѕ РїРµСЂРµРґ Р·Р°РїСѓСЃРєРѕРј РїРѕРґРїСЂРѕРіСЂР°РјРјС‹ 
# РІ a0 РґРѕР»Р¶РµРЅ Р»РµР¶Р°С‚СЊ arg1, РІ a1 - arg2 Рё С‚.Рґ.
# Р° РїРѕСЃР»Рµ Р·Р°РїСѓСЃРєР° РІ a0 Р±СѓРґРµС‚ Р»РµР¶Р°С‚СЊ res1, РІ a1 - res2


# РџСЂРѕРёР·РІРѕРґРёС‚ РІРІРѕРґ РјР°СЃСЃРёРІР°. Р’ СЃР»СѓС‡Р°Рµ, РµСЃР»Рё РІРІРµРґРµРЅРЅС‹Р№ РјР°СЃСЃРёРІ РѕРєР°Р¶РµС‚СЃСЏ РЅРµРїСЂР°РІРёР»СЊРЅРѕР№ РґР»РёРЅС‹, Р°РІР°СЂРёР№РЅРѕ Р·Р°РІРµСЂС€РёС‚ РїСЂРѕРіСЂР°РјРјСѓ
.macro input_body  # (arr, max_length) -> length
.data
	s_input_size: .asciz "Р’РІРµРґРёС‚Рµ СЂР°Р·РјРµСЂ РјР°СЃСЃРёРІР°: "
	s_input_elements: .asciz "Р’РІРµРґРёС‚Рµ СЌР»РµРјРµРЅС‚С‹ РјР°СЃСЃРёРІР° A:\n"
	s_invalid_size: .asciz "РћС€РёР±РєР°: СЂР°Р·РјРµСЂ РґРѕР»Р¶РµРЅ Р±С‹С‚СЊ С‡РёСЃР»РѕРј РѕС‚ 0 РґРѕ 10"
.text
	mv t1 a0  # Р’ t1 Р°РґСЂРµСЃ РјР°СЃСЃРёРІР°

	la a0 s_input_size
	li a7 4  # Р’С‹РІРѕРґ СЃС‚СЂРѕРєРё
	ecall
	
	li a7 5  # РІРІРѕРґ С‡РёСЃР»Р°
	ecall
	
	mv t6 a0  # Р’ t6 СЂР°Р·РјРµСЂ РјР°СЃСЃРёРІР°
	
	bgt a0 a1 invalid
	bltz a0 invalid
	b valid
	invalid:  # Р’ СЃР»СѓС‡Р°Рµ, РµСЃР»Рё РІРІРµРґРµРЅ РЅРµРїСЂР°РІРёР»СЊРЅС‹Р№ СЂР°Р·РјРµСЂ
		la a0 s_invalid_size
		li a7 4
		ecall
		exit (1)
	valid:
		li a7 4
		la a0 s_input_elements
		ecall
		
		li a7 5
		mv t0 t6  # Р’ t0 СЃС‡С‘С‚С‡РёРє С†РёРєР»Р°
		
		loop:  # Р’РІРѕРґ СЌР»РµРјРµРЅС‚РѕРІ РјР°СЃСЃРёРІР°
		beqz t0 end
			# РЎРѕС…СЂР°РЅСЏРµРј РІРІРµРґРµРЅРЅС‹Рµ СЌР»РµРјРµРЅС‚С‹ РІ РјР°СЃСЃРёРІ
			ecall  # a7 = 5
			sw a0 (t1)
			addi t1 t1 4
			addi t0 t0 -1
			b loop
		end:
		mv a0 t6
.end_macro

# РљРѕРїРёСЂСѓРµС‚ РјР°СЃСЃРёРІ Рђ РІ РјР°СЃСЃРёРІ Р’ Рё РёС‰РµС‚ Р°РґСЂРµСЃ РјРёРЅРёРјР°Р»СЊРЅРѕРіРѕ СЌР»РµРјРµРЅС‚Р° РІ Р’
# Р’ СЃР»СѓС‡Р°Рµ, РµСЃР»Рё РјР°СЃСЃРёРІ A РїСѓСЃС‚, РІРѕР·РІСЂР°С‰Р°РµС‚ Р°РґСЂРµСЃ, РјРµРЅСЊС€РёР№ arrA
.macro createB_body # (arrA, arrB, size) -> min_ind
.eqv max_word 0x7fffffff  # 2^31 -1 - РјР°РєСЃРёРјР°Р»СЊРЅРѕРµ С‡РёСЃР»Рѕ СЃРѕ Р·РЅР°РєРѕРј, СѓРјРµС‰Р°СЋС‰РµРµСЃСЏ РІ 1 СЃР»РѕРІРѕ
.text
	mv t0 a2
	mv t1 a0
	mv t2 a1
	addi a0 a1 -4  # РђРґСЂРµСЃ РјРёРЅРёРјР°Р»СЊРЅРѕРіРѕ СЌР»РµРјРµРЅС‚Р°
	li t3 max_word  # РњРёРЅРёРјР°Р»СЊРЅРѕРµ Р·РЅС‡РµРЅРёРµ (РёР·РЅР°С‡Р°Р»СЊРЅРѕ 2^31-1)
	
	loop:
	beqz t0 end
		lw t4 (t1)
		
		bge t4 t3 min_chosen  # Р•СЃР»Рё РЅРѕРІС‹Р№ СЌР»РµРјРµРЅС‚ РјРµРЅСЊС€Рµ С‚РµРєСѓС‰РµРіРѕ РјРёРЅРёРјР°Р»СЊРЅРѕРіРѕ
			mv a0 t2
			mv t3 t4			
		min_chosen:  # Р—РґРµСЃСЊ РјРёРЅРёРјР°Р»СЊРЅС‹Р№ РІСЃРµРіРґР° РїСЂР°РІРёР»СЊРЅС‹Р№ (РЅР° РґР°РЅРЅРѕР№ РёС‚РµСЂР°С†РёРё)
		
		# РљРѕРїРёСЂСѓРµРј СЌР»РµРјРµРЅС‚ РёР· Рђ РІ Р’
		sw t4 (t2)
		addi t0 t0 -1
		addi t1 t1 4
		addi t2 t2 4
		b loop
	end:
.end_macro


# РњРµРЅСЏРµС‚ РјРµСЃС‚Р°РјРё РјРёРЅРёРјР°Р»СЊРЅС‹Р№ СЌР»РµРјРµРЅС‚ (РµСЃР»Рё С‚Р°РєРѕР№ РµСЃС‚СЊ) Рё РїРµСЂРІС‹Р№
.macro swap_body # (arr, ind)
.text
	ble a1 a0 end # Р’ СЃР»СѓС‡Р°Рµ, РµСЃР»Рё РјРёРЅРёРјР°Р»СЊРЅРѕРіРѕ СЌР»РµРјРµРЅС‚Р° РЅРµС‚ (РїСѓСЃС‚РѕР№ РјР°СЃСЃРёРІ, a1 < a0, СЃРј. createB), РёР»Рё РµСЃР»Рё РїРµСЂРІС‹Р№ СЌР»РµРјРµРЅС‚ СѓР¶Рµ РјРёРЅРёРјР°Р»СЊРЅС‹Р№,
		      # РјРµРЅСЏС‚СЊ С‡С‚Рѕ-Р»РёР±Рѕ РјРµСЃС‚Р°РјРё РЅРµ РёРјРµРµС‚ СЃРјС‹СЃР»Р°
		lw t1 (a0)
		lw t2 (a1)
		
		sw t1 (a1)
		sw t2 (a0)
	end:
.end_macro

# Р’С‹РІРѕРґ РјР°СЃСЃРёРІР° РІ РєРѕРЅСЃРѕР»СЊ 
.macro print_body # (arr, size) 
.data
	s_sp: .asciz " "
	s_ln: .asciz "\n"
.text
	mv t1 a0
	
	loop:
	beqz a1 end
		# Р’С‹РІРѕРґРёРј СЌР»РµРјРµРЅС‚ СЃ РїСЂРѕР±РµР»РѕРј РїРѕСЃР»Рµ
		lw a0 (t1)
		li a7 1
		ecall
		li a7 4
		la a0 s_sp
		ecall
		addi a1 a1 -1
		addi t1 t1 4
		b loop
	end:
	la a0 s_ln
	li a7 4
	ecall
.end_macro

# РћРїСЂРµРґРµР»РµРЅРёРµ РїРѕРґРїСЂРѕРіСЂР°РјРј Рё РјР°РєСЂРѕСЃРѕРІ РґР»СЏ РёС… СѓРґРѕР±РЅРѕРіРѕ РІС‹Р·РѕРІР°
func(_input, input_body)
.macro input (%arr, %max_length)
	la a0 %arr
	li a1 %max_length
	jal _input
.end_macro
	
func(_createB, createB_body)
.macro createB (%arrA, %arrB, %size)
	la a0 %arrA
	la a1 %arrB
	mv a2 %size
	jal _createB
.end_macro

func(_swap, swap_body)
.macro swap (%arr, %ind)
	la a0 %arr
	mv a1 %ind
	jal _swap
.end_macro

func(_print, print_body)
.macro print (%arr, %size)
	la a0 %arr
	mv a1 %size
	jal _print
.end_macro


# РћСЃРЅРѕРІРЅР°СЏ РїСЂРѕРіСЂР°РјРјР°
.macro mmain (%arrA, %arrB, %size)
	createB(%arrA, %arrB, %size)
	mv s1 a0
	
	swap(%arrB, s1)
.end_macro
